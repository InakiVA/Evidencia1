#lang racket
(define (code-type code)
  (if (or (string-contains? code "main")) 
      (display "El codigo es c++ \n")
      (if (or (string-contains? code ":")) 
          (display "El codigo es Python \n")
          (if (string-contains? code "define")
              (display "El codigo es Racket \n")
              ("No esta dentro de las opciones")))))

(display "Ingresa la ruta del documento (para que funcione utiliza la misma carpeta del codigo): ")
(define program (read-line))
(display "El programa ingresado es el siguiente: ")
(displayln program)
(define codigo-en-string (file->string program))
(define input-port (open-input-file program))

(let loop ()
  (define line (read-line input-port))
  (unless (eof-object? line)
    (displayln line)
    (loop)))
(close-input-port input-port)
(code-type codigo-en-string)

(define (read-program archivo)
  (with-input-from-file archivo
    (lambda ()
      (let loop ((file-line '())
                 (line (read-line)))
        (cond ((eof-object? line) (reverse file-line))
              (else (loop (cons line file-line) (read-line))))))))

(define (write-HTML archivo file-line)
  (with-output-to-file archivo
    (lambda ()
      (display "<html>\n<head>\n")
      (display "<link rel=\"stylesheet\" type=\"text/css\" href=\"key.css\">\n")
      (display "</head>\n<body>\n")
      (for-each (lambda (line)
                  (let ((selection
                         (string-join
                          (map (lambda (token)
                                 (cond ((string-prefix? token "for") (string-append "<span class=\"loop\">" token "</span>"))
                                       ((string-prefix? token "do") (string-append "<span class=\"loop\">" token "</span>"))
                                       ((string-prefix? token "while") (string-append "<span class=\"loop\">" token "</span>"))
                                       ((string-prefix? token "if") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "elif") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "else") (string-append "<span class=\"PR\">" token "</span>"))  
                                       ((string-prefix? token "and") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "or") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "list") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "return") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "break") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "write") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "lambda") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "cond") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "switch") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "case") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "display") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "print") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "define") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "def") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "let") (string-append "<span class=\"PR\">" token "</span>"))
                                       ((string-prefix? token "string") (string-append "<span class=\"lit\">" token "</span>")) 
                                       ((string-prefix? token "double") (string-append "<span class=\"lit\">" token "</span>"))
                                       ((string-prefix? token "int") (string-append "<span class=\"lit\">" token "</span>")) 
                                       ((string-prefix? token "char") (string-append "<span class=\"lit\">" token "</span>"))
                                       ((string-prefix? token "void") (string-append "<span class=\"lit\">" token "</span>"))
                                       ((string-prefix? token "+") (string-append "<span class=\"operador\">" token "</span>")) 
                                       ((string-prefix? token "-") (string-append "<span class=\"operador\">" token "</span>")) 
                                       ((string-prefix? token "*") (string-append "<span class=\"operador\">" token "</span>"))  
                                       ((string-prefix? token "/") (string-append "<span class=\"operador\">" token "</span>"))  
                                       ((string-prefix? token ">") (string-append "<span class=\"operador\">" token "</span>"))  
                                       ((string-prefix? token "<") (string-append "<span class=\"operador\">" token "</span>"))  
                                       ((string-prefix? token ">=") (string-append "<span class=\"operador\">" token "</span>"))
                                       ((string-prefix? token "==") (string-append "<span class=\"operador\">" token "</span>")) 
                                       ((string-prefix? token "<=") (string-append "<span class=\"operador\">" token "</span>"))
                                       ((string-prefix? token "=") (string-append "<span class=\"operador\">" token "</span>"))
                                       ((string-prefix? token "+=") (string-append "<span class=\"operador\">" token "</span>"))
                                       ((string-prefix? token "-=") (string-append "<span class=\"operador\">" token "</span>"))
                                       ((string-prefix? token "#") (string-append "<span class=\"comment\">" token "</span>"))
                                       ((string-prefix? token "//") (string-append "<span class=\"comment\">" token "</span>"))
                                       (else token)))
                               (string-split line " "))
                          " ")))
                    (display (string-append "<p>" selection "</p>\n")))) file-line)
      (display "</body>\n</html>\n"))))
(with-output-to-file "key.css" 
  (lambda ()
    (display ".lit { color: yellow; font-weight: bold ; }\n")
    (display ".comment { color: purple; }\n")
    (display ".operador { color: red; }\n")
    (display ".PR { color: green; font-weight: bold ; }\n")
    (display ".loop { color: blue; font-weight: bold ; }\n")))

(define (txt-a-html archivo-txt archivo-html)
  (write-HTML archivo-html (read-program archivo-txt)))
(txt-a-html program "resultado.html")
